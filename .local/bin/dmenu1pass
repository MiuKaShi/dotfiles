#!/usr/bin/env sh

# Dependencies:
# op             The 1Password CLI binary used to access the user's data
# secret-tool    Used to store and retrieve 1Password session tokens securely
# jq             Helper binary for parsing 1Password API responses
# xsel           Used to copy passwords to the clipboard
# notify-send    Small helper to display progress notifications
# dmenu          Used for interactive password input

password=$(cat ~/.1p) # read 1password information

login () {
    # asks the user for their 1pass keyphrase and signs them in. Additionally, stores the session token in the users keyring
    # and returns it.
    local token="$(echo "$password" | xargs | op signin my --raw)"
    echo "$token" > /tmp/.1p_token
    echo "$token"
}

retrieve_token () {
    # returns a previously persisted session token from the user's keyring.
    # returns nothing if no token was found.
    cat /tmp/.1p_token
}

get_items () {
    # requests and returns all items from the remote vault.
    #
    # arg $1: a valid 1password session token
    #
    # returns: JSON-formatted array of items
    OP_SESSION_my="$1" op list items --cache 
}

get_item_details () {
    # requests and returns the details of a single item.
    #
    # arg $1: a valid 1password session token
    # arg $2: the UUID of the item to fetch
    #
    # returns: JSON-formatted object of the fetched item
    OP_SESSION_my="$1" op get item --cache "$2"
}

get_item_pw () {
    # returns the main password for a given item, based on its template type.
    #
    # arg $1: JSON-formatted item object. Use `get_item_details` to fetch it.
    case $(echo "$1" | jq -r '.templateUuid') in
        "001")
            # logins
            echo "$1" | jq -r '.details.fields[] | select(.designation=="password").value'
            ;;
        "006")
            # documents
            echo "$1" | jq -r '.details.sections[].fields[] | select(.t=="Password").v'
            ;;
        "110")
            # servers
            echo "$1" | jq -r '.details.sections[].fields[] | select(.t=="password").v'
            ;;
        *)
            echo "unknown template type."
            exit 11
            ;;
    esac
}

token=$(retrieve_token)
# if fetching items fails: login and retry:
if ! items=$(get_items "$token"); then
    token=$(login)
    items=$(get_items "$token")
fi

# 1. get list of item objects
# 2. get a list of titles only
# 3. let the user select an entry and get the selected index (one-indexed)
# 4. retrieve the ID of the selected title from the items list using the index
# 5. fetch the item details using its ID
item_names=$(echo "$items" | jq -r '.[].overview.title')
selected_name=$(echo "$item_names" | dmenu -i -p "1Password:")
[[ ! $selected_name ]] && exit 1
selected_index=$(echo "$item_names" | eval "awk '/"${selected_name}"/ {print NR}'")
selected_id=$(echo "$items" | jq -r --arg idx $selected_index '.[$idx | tonumber - 1].uuid')
item_details=$(get_item_details "$token" "$selected_id")

if [[ $1 == "print-item" ]]; then
    echo "$item_details" | jq
    exit 0
fi

password=$(get_item_pw "$item_details")

if [[ $1 == "print" ]]; then
    echo $password
    exit 0
fi

echo "$password" | tr -d '\n' | xsel -bi
item_title=$(echo "$item_details" | jq '.overview.title')
item_account=$(echo "$item_details" | jq '.overview.ainfo')
notify-send "$item_title " "Account:$item_account\nPassword:Copied to clipboard"

# start a forked and delayed process to clear the clipboard after a given timeout:
(sleep 10; echo "" | tr -d '\n' | xsel -bi;) &
