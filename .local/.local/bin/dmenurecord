#!/bin/sh

# Usage:
# `$0`: Ask for recording type via dmenu
# `$0 screencast`: Record both audio and screen
# `$0 video`: Record only screen
# `$0 audio`: Record only audio
# `$0 kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.

getdim() {
    choice=$(xrandr --listmonitors | awk 'NR>=2 {print $NF} END {print "All"}' | dmenu -i -p "Select recording target:")
    case "$choice" in
        All)
            xrandr | grep -oP '(?<=current ).*(?=,)' | grep -o '[0-9]\+' | tr '\n' ' ' >/tmp/slop
            ;;
        *)
            xrandr -q | grep "$choice" | grep -oE '[0-9]+x[0-9]+\+[0-9]+\+[0-9]+' | grep -o '[0-9]\+' | tr '\n' ' ' >/tmp/slop
            ;;
    esac
    read -r W H X Y </tmp/slop
    rm /tmp/slop
}

updateicon() {
    echo "$1" >/tmp/recordingicon
    pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
}

killrecording() {
    recpid="$(cat /tmp/recordingpid)"
    kill -15 "$recpid"
    rm -f /tmp/recordingpid
    updateicon ""
    pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
}

screencast() {
    getdim
    ffmpeg -y \
        -f x11grab \
        -framerate 30 \
        -video_size "$W"x"$H" \
        -i "$DISPLAY+$X,$Y" \
        -r 24 \
        -use_wallclock_as_timestamps 1 \
        -f alsa -thread_queue_size 1024 -i default \
        -c:v h264 \
        -crf 0 -preset ultrafast -c:a aac \
        "$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mp4" &
    echo $! >/tmp/recordingpid
    updateicon "‚è∫Ô∏èüéôÔ∏è"
}

video() {
    getdim
    ffmpeg \
        -f x11grab \
        -framerate 30 \
        -video_size "$W"x"$H" \
        -i "$DISPLAY+$X,$Y" \
        -c:v libx264 -qp 0 -r 30 \
        "$HOME/$choice-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! >/tmp/recordingpid
    updateicon "‚è∫Ô∏è"
}

webcamhidef() {
    ffmpeg \
        -f v4l2 \
        -i /dev/video0 \
        -video_size 1920x1080 \
        "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! >/tmp/recordingpid
    updateicon "üé•"
}

webcam() {
    ffmpeg \
        -f v4l2 \
        -i /dev/video0 \
        -video_size 640x480 \
        "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! >/tmp/recordingpid
    updateicon "üé•"
}

audio() {
    ffmpeg \
        -f alsa -i default \
        -c:a flac \
        "$HOME/audio-$(date '+%y%m%d-%H%M-%S').flac" &
    echo $! >/tmp/recordingpid
    updateicon "üéôÔ∏è"
}

askrecording() {
    choice=$(printf "screencast\\nvideo\\nvideo (window)\\naudio\\nwebcam\\nwebcam (hi-def)" | dmenu -i -p "Select recording style:")
    case "$choice" in
        screencast) screencast ;;
        audio) audio ;;
        video) video ;;
        "video (window)") videoselected ;;
        webcam) webcam ;;
        "webcam (hi-def)") webcamhidef ;;
    esac
}

asktoend() {
    response=$(printf "No\\nYes" | dmenu -i -p "Recording still active. End recording?") \
        && [ "$response" = "Yes" ] && killrecording
}

videoselected() {
    slop -f "%w %h %x %y" >/tmp/slop
    read -r W H X Y </tmp/slop
    rm /tmp/slop

    ffmpeg \
        -f x11grab \
        -framerate 30 \
        -video_size "$W"x"$H" \
        -i :0.0+"$X,$Y" \
        -c:v libx264 -qp 0 -r 30 \
        "$HOME/box-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! >/tmp/recordingpid
    updateicon "‚è∫Ô∏è"
}

case "$1" in
    screencast) screencast ;;
    audio) audio ;;
    video) video ;;
    *selected) videoselected ;;
    kill) killrecording ;;
    *) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording ;;
esac
