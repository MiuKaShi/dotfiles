#!/bin/bash
# Separate bibfile into single files
#
# Records must be separated by blank lines
# preceding lines starting with an "@" sign.

function usage() {
    cat 1>&2 <<EOF
$(basename $0): Separate bibfile into single files

USAGE: $(basename $0) bibfiles
File entries are used for output filenames.
Options:
  -h  print this help
  -k  all filenames from citation keys
  -f  force override of output files
EOF
    exit $1
}
if [ $# -lt 1 ]; then usage 1; fi

# Default options.
USEFILE=1 # Use the Field field for output filenames.
OVERRIDE=0 # Do not override existing output files.

# Parse command line options.
for arg; do
    # With option '-h' print usage and exit.
    if [[ "$arg" == "-h" ]]; then usage 0; fi
    # With option '-k' use citation keys for all output filenames.
    if [[ "$arg" == "-k" ]]; then USEFILE=0; fi
    # With option '-f' force override of output files.
    if [[ "$arg" == "-f" ]]; then OVERRIDE=1; fi
done


# Iterate bib files.
for bibfile in "$@"
do
    # Skip options.
    test "$bibfile" != "-k" || continue
    test "$bibfile" != "-f" || continue

    # Skip if not a regular file.
    test -f "$bibfile" || {
        [[ "$bibfile" =~ ^- ]] \
            && echo "$(basename $0): $bibfile: Unknown option" >/dev/stderr \
            || echo "$(basename $0): $bibfile: File not found" >/dev/stderr;
        continue
    }

    # Write records to single files.
    sed '1s/^/\n\n/;N;s/\([^\n]\)\n@/\1\n\n@/;P;D' "$bibfile" \
        | gawk -v src="$bibfile" -v useFile=$USEFILE -v override=$OVERRIDE '
BEGIN {
    # Split at new lines preceding an "@" sign.
    RS="\n\n@"
    # Handle printing of "@" and trailing new line later.
    ORS=""
}

{
    if ((useFile) && ($0 ~ /\<File\> += {:[^}]+:[A-Z]+}/)) {
        # If exists, obtain pdf filename from JabRef style field File.
        match($0, "File += {:[^}]+:[A-Z]+}", a) # Requires GNU AWK.
        sub("^File += {:", "", a[0])
        sub(":[A-Z]+}$", "", a[0])
    } else {
        # If not, derive a filename from the citation key.
        match($0, "[A-Za-z][^{]*{[^,]*", a) # Requires GNU AWK.
        sub("^[A-Za-z][^{]*{", "", a[0])
        if (a[0] != "") {
            cmd = sprintf("echo \"%s\" | sed -r \
                -e \"s/(.*)([a-z])([0-9]{4}[a-z]*)(:|$)/\\u\\1\\2_\\3\\4/\" \
                -e \"s/:[a-z]*$/\\U&/\"", a[0])
            cmd | getline tmp
            close(cmd)
            a[0] = tmp
            gsub("[: \n]", "_", a[0])
            gsub("_*$", "", a[0])
            a[0] = "by_citekey/" a[0] ".pdf"
        }
    }
}

/^[A-Za-z]+ *\{/ {
    if (did_write) {
        # Print newlines lost by splitting except for the last record.
        print "\n\n" >> outfile
        close(outfile)
    }
    did_write = 0

    # If string is not empty, append suffix .bib for filename.
    if (a[0] != "") {
        outfile = a[0] ".bib"
        gsub("[{;}]", "", outfile)
    } else {
        cmd = sprintf("nl -b a %s | sed \"/\\t@/!d\" | nl | grep \"^ *%d\\>\" \
            | awk \"{print \\$2}\"", src, NR-1)
        cmd | getline line
        close(cmd)
        printf("ERROR: empty citation key (record %d, line %d).\n",
            NR-1, line) > "/dev/stderr"
        next
    }

    # Skip source file.
    if (outfile == FILENAME) {
        printf("Skip source file »%s«.\n", outfile) > "/dev/stderr"
        next
    }

    # Skip directory.
    if (system(sprintf("test ! -d %s", outfile))) {
        printf("Skip directory »%s«.\n", outfile) > "/dev/stderr"
        next
    }

    # Do not override existing files unless override option is set.
    if ((!override) && system(sprintf("test ! -e %s", outfile))) {
        printf("Skip existing file »%s«.\n", outfile) > "/dev/stderr"
        next
    }

    # Make sure the directory exists.
    if (system(sprintf("mkdir -p `dirname %s`", outfile))) {
        printf("Aborting at file »%s«.\n", outfile) > "/dev/stderr"
        exit(1)
    }

    # Write single record to file.
    printf("Write bibtex record to »%s«.\n", outfile)
    print "@" $0 > outfile
    close(outfile)
    did_write = 1
}
' || exit 1
done
