#!/bin/bash
# Extract entries from bibfile by matching the citation key
#
# Records must be separated by blank lines
# preceding lines starting with an "@" sign.

function usage() {
    cat 1>&2 <<EOF
$(basename $0): Extract entries from bibfile by matching the citation key

USAGE: $(basename $0) bibfile pattern [pattern]...
Options:
  -h  print this help
EOF
    exit $1
}
if [ $# -lt 2 ]; then usage 1; fi

# Default options.

# Parse command line options.
for arg; do
    # With option '-h' print usage and exit.
    if [[ "$arg" == "-h" ]]; then usage 0; fi
done


# Select bib file from first argument (possibly '-' for standard input).
bibfile=$1
shift

# Replace »name.pdf« by »name.pdf.bib«.
bibfile=$(sed 's/\.pdf$/&.bib/' <<< "$bibfile")

# Read from standard in or check if file exists.
if [ "$bibfile" ==  "-" ]
then
    bibfile=/dev/stdin
else
    test -f "$bibfile" || usage 1
fi

# Concatenate patterns with inclusive or.
orpattern="$1"
shift
for pattern in "$@"; do orpattern="$orpattern|$pattern"; done

# Print records with matching citation key.
sed '1s/^/\n/;N;s/\([^\n]\)\n@/\1\n\n@/;P;D' "$bibfile" \
    | sed '$d' \
    | awk -v src="$bibfile" -v pattern="$orpattern" '
BEGIN {
    # Split at new lines preceding an "@" sign.
    RS="\n@"
    # Handle printing of "@" and trailing new line later.
    ORS=""
    # Number of matched records.
    matched=0
}

/^[A-Za-z]+ *\{/ {
    if ($1 ~ pattern) {
        # Print newlines lost by splitting.
        if (matched > 0) { print "\n"; }
        matched += 1
        lastnr = NR

        # Print single record.
        print "@" $0
    }
}
END { if (matched > 0) { print "\n"; } }
' || exit 1
