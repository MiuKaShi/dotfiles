#!/bin/bash
# Print rename commands for bibtex files
#
# A letter suffix to the year in the citation key is kept
# or may be selected with the filename as 'file.bib:a'.

ALLOWED_CHARS="_A-Za-z:0-9-"

function usage() {
    cat 1>&2 <<EOF
$(basename $0): Print rename commands for bibtex files

Journal names are abbreviated before creating the file name.
To gain speed rather than stability, the option -s can be used.

USAGE: $(basename $0) bibfiles[:letter]
Optional letter suffix for year.
Options:
  -n  show changes only
  -h  print this help
  -s  skip journal abbreviation
EOF
    exit $1
}
if [ $# -lt 1 ]; then usage 1; fi

# Default options.
DRYRUN=0 # Execute commands (no dry run).
SKIPJ=0 # Skip journal abbreviation (faster).

# Parse command line options.
for arg; do
    # With option '-h' print usage and exit.
    if [[ "$arg" == "-h" ]]; then usage 0; fi
    # With option '-n' only print rename commands.
    if [[ "$arg" == "-n" ]]; then DRYRUN=1; fi
    # With option '-s' skip journal abbreviation.
    if [[ "$arg" == "-s" ]]; then SKIPJ=1; fi
done


# Function to get a field value from the first bib entry.
function getvalue() { # getvalue fieldname filename
    pattern="^ *$(sed 's/\(.\)/[\u\1\l\1]/' <<< $1) *="
    awk -v pattern="$pattern" '/^@/{nr+=1; if(nr>1) exit}
{if ($0 ~ pattern) print $0}' "$2" | grep -o '{[^{].*' | head -n1 \
    | sed 's/^{//;s/}[, ]*$//'
}


# Iterate bib files.
for bibfile in "$@"
do
    # Skip options.
    test "$bibfile" != "-n" || continue
    test "$bibfile" != "-s" || continue

    # Possibly select letter suffix from 'filename:letter'.
    letter=$(grep -o ':[a-z]*$' <<< "$bibfile" | head -n1)
    test -z "$letter" || bibfile=$(sed 's/:[a-z]*$//' <<< "$bibfile")

    # Remove trailing »./« for stable filename comparison.
    bibfile=$(sed 's:^\./::' <<< "$bibfile")

    # Replace »name.pdf« by »name.pdf.bib«.
    bibfile=$(sed 's/\.pdf$/&.bib/' <<< "$bibfile")
    pdffile=$(sed -n '/\.pdf\.bib$/{s//.pdf/;p}' <<< "$bibfile")

    # Skip if not a regular file.
    test -f "$bibfile" || {
        [[ "$bibfile" =~ ^- ]] \
            && echo "$(basename $0): $bibfile: Unknown option" >/dev/stderr \
            || echo "$(basename $0): $bibfile: File not found" >/dev/stderr;
        continue
    }

    # Skip multi record files.
    nr=`sed -r '/@([A-Za-z]+)* *\{.*,/!d' "$bibfile" | wc -l`
    if [ $nr -gt 1 ]
    then
        echo "WARNING: Do not create name for multi record file '$bibfile'." >/dev/stderr
        continue
    fi

    # Obtain field values.
    doi=$(getvalue Doi "$bibfile")
    fauthor=$(getvalue Author "$bibfile" | bib-conva \
        | sed 's/ and .*//;s/ *,.*//;s/.*[ ~]//')

    # Obtain Journal (default) or Series (Incollection).
    if grep -q @Incollection "$bibfile"
    then
        journal=$(getvalue Series "$bibfile")
    else
        journal=$(getvalue Journal "$bibfile")
    fi
    longjournal=$(echo "$journal" | bib-convu)

    if [ $SKIPJ -eq 0 ]
    then
        # Stable key creation with journal abbreviation.
        journal=$(bib-jabbr -j "$journal")
    fi
    journal=$(bib-conva <<< "$journal" \
        | sed -r \
              -e 's/[,:].*//;s/OF //;s/\<[Tt][Hh][Ee]\>//' \
              -e 's/([A-Za-z]+) */\1/g;s/[a-z. ]//g' \
              -e 's/ *[[({].*//')

    year=$(getvalue Year "$bibfile")

    # If not from 'filename:letter', search letter in actual citation key.
    if [ -n "$year" ] && [ -z "$letter" ]
    then
        letter=$(grep '^@' "$bibfile" | head -n1 \
            | grep -o "${year}[a-z]*[,: ]" | grep -o "[a-z]*" | head -n1)
    else
        letter="${letter#:}" # Remove preceding colon.
    fi

    # Only keep allowed characters and merge or remove dashes.
    fauthor=$(sed "s/[^$ALLOWED_CHARS]//g;s/---*/-/g" <<< "$fauthor")
    journal=$(sed "s/[^$ALLOWED_CHARS]//g;s/-//g" <<< "$journal")

    # Keep only the first four letters for the journal.
    journal=$(echo "$journal" | sed 's/^\(....\).*/\1/')

    # New file names.
    newpdfname="${fauthor}_${year}${letter}_${journal}"
    # Add path prefix and file suffixes.
    newbibname="$(dirname "$bibfile")/${newpdfname}.pdf.bib"
    newpdfname="$(dirname "$bibfile")/${newpdfname}.pdf"

    # Remove trailing »./« for stable filename comparison.
    newbibname=$(sed 's:^\./::' <<< "$newbibname")
    newpdfname=$(sed 's:^\./::' <<< "$newpdfname")

    # Assure safe quoting.
    qnewbibname="${newbibname//\"/\\\"}"
    qnewpdfname="${newpdfname//\"/\\\"}"
    qbibfile="${bibfile//\"/\\\"}"
    qpdffile="${pdffile//\"/\\\"}"

    # For dry run print info and doi link for verification by user.
    if [ $DRYRUN -eq 1 ]
    then
        echo -e "\nbibtex info:"
        echo "  author: $fauthor"
        echo "  journal: $journal ($longjournal)"
        echo "  year: $year"
        if [ -n "$doi" ]
        then
            echo "  http://doi.org/${doi}"
        fi
    fi

    # Print rename command for bib file.
    if [ "${bibfile}" != "${newbibname}" ] && [ ! -e "${newbibname}" ]
    then
        echo "rename '${qbibfile}' to '${qnewbibname}'"
        test $DRYRUN -eq 1 || mv -i "${qbibfile}" "${qnewbibname}"
    elif [ "${bibfile}" != "${newbibname}" ] && [ -e "${newbibname}" ]
    then
        echo "# WARNING: Do not move '${bibfile}' to existing '${newbibname}'." >/dev/stderr
    else
        test $DRYRUN -eq 1 && echo "filename '${newbibname}' is up to date"
    fi

    test -f "$pdffile" || continue

    # Print rename command for pdf file.
    if [ "${pdffile}" != "${newpdfname}" ] && [ ! -e "${newpdfname}" ]
    then
        echo "rename '${qpdffile}' to '${qnewpdfname}'"
        test $DRYRUN -eq 1 || mv -i "${qpdffile}" "${qnewpdfname}"
    elif [ "${pdffile}" != "${newpdfname}" ] && [ -e "${newpdfname}" ]
    then
        echo "# WARNING: Do not move '${pdffile}' to existing '${newpdfname}'." >/dev/stderr
    else
        test $DRYRUN -eq 1 && echo "filename '${newpdfname}' is up to date"
    fi
done
