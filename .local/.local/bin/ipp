#!/bin/bash

# Get the local IP address and external IPv4 and IPv6 addresses
get_ip_info() {
    active_net_device=$(ip addr show | awk '/inet.*brd/{print $NF; exit}')
    local_ip=$(ip -o -4 addr list | grep "$active_net_device" | awk '{print $4}' | cut -d/ -f1)
    ipv4=$(curl -s https://ipv4.ipleak.net/json/ | jq -r '. | "IPV4: \(.ip) *** Country: \(.country_name) ** City: \(.city_name)  ** ISP: \(.isp_name)"')
    ipv6=$(curl -s https://ipv6.ipleak.net/json/ | jq -r '. | "IPV6: \(.ip) *** Country: \(.country_name) ** City: \(.city_name)  ** ISP: \(.isp_name)"')
    echo "LocalIP: $local_ip"
    echo "$ipv4"
    if [ -z "$ipv6" ]; then
        echo "IPV6: No IPV6"
    else
        echo "$ipv6"
    fi
}

# Check the IP address for a given domain name or IP address
check_ip() {
    ip_addr="$1"
    ipv4=$(curl -s https://ipv4.ipleak.net/json/"$ip_addr" | jq -r '. | "IPV4: \(.ip) *** Country: \(.country_name) ** City: \(.city_name)  ** ISP: \(.isp_name)"')
    echo "$ipv4"
}

# Check for DNS leaks using multiple servers
check_dns() {
    session=$(echo firefox | sha1sum)
    for i in $(seq 5000 5003); do
        curl -s "https://${session:0:40}-${i}.ipleak.net/dnsdetection/"
        sleep 1
    done
}

# Determine which function to call based on the command line argument
case "$1" in
    dns)
        check_dns
        ;;
    *)
        if echo "$1" | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' > /dev/null; then
            check_ip "$1"
        else
            get_ip_info
        fi
        ;;
esac
