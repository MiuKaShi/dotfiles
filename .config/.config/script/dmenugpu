#!/bin/sh

# Please run with root
# The default nivdia BusID is "PCI:1:0:0", if not please change to your ID

export WM="dwm"
case "$(readlink -f /sbin/init)" in
    *systemd*) ctl='systemctl' ;;
    *) ctl='loginctl' ;;
esac

gpu_env="/home/miuka/.config/shell/gpu"
kernel=$(awk '{ print $4 }' </proc/version | tr -d '()' | cut -f1 -d"@")
initramfs_path="/boot/initramfs-$kernel.img"
hases_path="/home/miuka/.cache/init_sha"

black_list="/etc/modprobe.d/blacklist-nvidia.conf"
udev_intel="/lib/udev/rules.d/50-remove-nvidia.rules"
udev_pm="/lib/udev/rules.d/80-nvidia-pm.rules "
modeset="/etc/modprobe.d/nvidia.conf"
xorg="/etc/X11/xorg.conf"
extra="/etc/X11/xorg.conf.d/10-nvidia.conf"

intel_env() {
    cat >"$gpu_env" <<EOF
# Generated by dmenugpu

export LIBVA_DRIVER_NAME=iHD
export VDPAU_DRIVER=va_gl
EOF
}

nvidia_env() {
    cat >"$gpu_env" <<EOF
# Generated by dmenugpu

export LIBVA_DRIVER_NAME=nvidia
export VDPAU_DRIVER=nvidia
export DRI_PRIME=1
EOF
}

intel_file() {
    cat >"$black_list" <<EOF
# Generated by dmenugpu

blacklist nouveau
blacklist nvidia
blacklist nvidia_drm
blacklist nvidia_uvm
blacklist nvidia_modeset
alias nouveau off
alias nvidia off
alias nvidia_drm off
alias nvidia_uvm off
alias nvidia_modeset off
EOF

    cat >"$udev_intel" <<EOF
# Generated by dmenugpu

# Remove NVIDIA USB xHCI Host Controller devices, if present
ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c0330", ATTR{power/control}="auto", ATTR{remove}="1"

# Remove NVIDIA USB Type-C UCSI devices, if present
ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c8000", ATTR{power/control}="auto", ATTR{remove}="1"

# Remove NVIDIA Audio devices, if present
ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x040300", ATTR{power/control}="auto", ATTR{remove}="1"

# Remove NVIDIA VGA/3D controller devices
ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x03[0-9]*", ATTR{power/control}="auto", ATTR{remove}="1"
EOF
}

hybrid_file() {
    cat >"$udev_pm" <<EOF
# Generated by dmenugpu

# Remove NVIDIA USB xHCI Host Controller devices, if present
ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c0330", ATTR{remove}="1"

# Remove NVIDIA USB Type-C UCSI devices, if present
ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c8000", ATTR{remove}="1"

# Remove NVIDIA Audio devices, if present
ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x040300", ATTR{remove}="1"

# Enable runtime PM for NVIDIA VGA/3D controller devices on driver bind
ACTION=="bind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", TEST=="power/control", ATTR{power/control}="auto"
ACTION=="bind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030200", TEST=="power/control", ATTR{power/control}="auto"

# Disable runtime PM for NVIDIA VGA/3D controller devices on driver unbind
ACTION=="unbind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", TEST=="power/control", ATTR{power/control}="on"
ACTION=="unbind", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030200", TEST=="power/control", ATTR{power/control}="on"
EOF

    cat >"$modeset" <<EOF
# Automatically generated by EnvyControl

options nvidia-drm modeset=1
options nvidia "NVreg_DynamicPowerManagement=0x02"
options nvidia NVreg_PreserveVideoMemoryAllocations=1
EOF
}

nvidia_file() {

    cat >"$xorg" <<EOF
# Generated by dmenugpu

Section "ServerLayout"
    Identifier "layout"
    Screen 0 "nvidia"
    Inactive "intel"
EndSection

Section "Device"
    Identifier "nvidia"
    Driver "nvidia"
    BusID "PCI:1:0:0"
EndSection

Section "Screen"
    Identifier "nvidia"
    Device "nvidia"
    Option "AllowEmptyInitialConfiguration"
EndSection

Section "Device"
    Identifier "intel"
    Driver "intel"
EndSection

Section "Screen"
    Identifier "intel"
    Device "intel"
EndSection
EOF

    cat >"$modeset" <<EOF
# Generated by dmenugpu

options nvidia-drm modeset=1
EOF

    cat >"$extra" <<EOF
# Generated by dmenugpu

Section "OutputClass"
    Identifier "nvidia"
    MatchDriver "nvidia-drm"
    Driver "nvidia"
    Option "ForceCompositionPipeline" "true"
    Option "Coolbits" "28"
EndSection
EOF
}

clean_file() {
    rm -rf "$gpu_env"
    rm -rf "$black_list"
    rm -rf "$udev_intel"
    rm -rf "$udev_pm"
    rm -rf "$xorg"
    rm -rf "$extra"
    rm -rf "$modeset"
    rm -rf /etc/X11/xorg.conf.d/90-nvidia.conf
}

query_mode() {
    if [ -f "$black_list" ] && [ -f "$udev_intel" ]; then
        echo "integrated"
    elif [ -f "$xorg" ] && [ -f "$modeset" ]; then
        echo "nvidia"
    else
        echo "hybrid"
    fi
}

boot_now() {
    case "$(printf "🔃 Now(Reboot)\n⏰ Later" | dmenu -i -p "Change to $mode:")" in
        '🔃 Now(Reboot)') $ctl reboot -i ;;
        '⏰ Later') exit 0 ;;
    esac
}

switch_mode() {
    mode=$(printf "💻 Intel\n✨ Hybrid\n🚀 Nvidia" | dmenu -i -p "Select GPU Mode:")
    case "$mode" in
        '💻 Intel')
            clean_file
            intel_env
            intel_file
            hases_old=$(cat "$hases_path")
            hases_new=$(sha256sum "$initramfs_path" | awk '{ print $1 }')
            if [ "$hases_old" != "$hases_new" ]; then
                mkinitcpio -p "$kernel"
                sha256sum $initramfs_path | awk '{ print $1 }' >"$hases_path"
            fi
            boot_now
            ;;
        '✨ Hybrid')
            clean_file
            nvidia_env
            hybrid_file
            boot_now
            ;;
        '🚀 Nvidia')
            clean_file
            nvidia_env
            nvidia_file
            boot_now
            ;;
    esac
}

case $1 in
    '-q') query_mode ;;
    *)
        if [ "$(id -u)" -ne 0 ]; then
            echo "Please run as root user"
            exit 1
        fi
        switch_mode
        ;;
esac
